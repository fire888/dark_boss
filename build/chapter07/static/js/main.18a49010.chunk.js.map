{"version":3,"sources":["_CORE/pipeLines/initPipeLine.js","chapter07/src/constants/constants_materials.js","chapter07/src/constants/constants_elements.js","_CORE/helpers/helper_Emitter.js","_CORE/helpers/helper_FrameUpdater_02.js","chapter07/src/Entities/Studio.js","chapter07/src/helpers/m4.js","chapter07/src/helpers/geomHelpers.js","chapter07/src/Entities/GeneratorWave/TILES.js","chapter07/src/Entities/GeneratorWave/createGeneratorWave.js","chapter07/src/Entities/GeneratorWave/treeModel.js","chapter07/src/constants/constants_modules.js","_CORE/helpers/helper_DeviceResizer.js","chapter07/src/actions/actions.js","chapter07/src/index.js"],"names":["gameModules","CONSTANTS","a","initModulesByState","root","loaderAssets","state","modulesData","i","length","key","constr","initStateKey","COLOR1_1","COLOR2_1","COLOR3_1","MATERIALS_CONF","mat","props","color","lightMap","lightMapIntensity","normalMap","normalScale","THREE","envMap","reflectivity","shininess","specular","map","bumpMap","bumpScale","emissive","transparent","alphaMap","opacity","SIZE_QUADRANT","LOCATIONS_QUADRANTS","MATERIALS_CONFIG","CONFIG_FOR_INIT","isInCar","currentSceneConfig","isInVirtual","isPlayerInCar","carProps","keyMesh","keyCollide","position","rotation","bodyProps","lCol","lW","ENV_START","fogNear","fogFar","colorFog","colorBack","backgroundImgKey","ENV_NORMAL","ENV_RED","ENV_RED_NEAR","ENV_END","START_ENV_CONFIG","ENV_CONFIG_WORD_1","ENV_CONFIG_WORD_2","studioConfig","canId","rendererCon","antialias","amb","strength","sceneEnvironment","composerAddPass","playerConfig","speed","speedRot","speedDown","offsetFromFloor","offsetFromFloorFactor","offsetWallCollision","level","startPos","cameraData","fov","ratio","window","innerWidth","innerHeight","near","far","pos","frontObjPos","backObjPos","lightDataOne","dist","decay","EventEmitter","this","_storage","id","data","getOrCreateArrFromObj","forEach","action","callback","push","filter","item","s","console","log","obj","FrameUpdater","_subscribers","time","delta","count","oldTime","update","R","Date","now","isNaN","dataFromChine","animate","requestAnimationFrame","fn","Studio","_root","assets","emitter","canvas","document","getElementById","_renderer","setClearColor","setPixelRatio","devicePixelRatio","setSize","_scene","_lightA","add","l","targetObject","target","x","_playerCamera","_controlsCamera","set","controls","OrbitControls","domElement","vec3","isPlayerView","toggleView","getWorldPosition","_renderPass","camera","subscribe","resize","size","width","height","aspect","updateProjectionMatrix","addEventListener","addToScene","mesh","removeFromScene","remove","f","drawFrame","Math","sin","z","cos","render","setTimeout","cam","conf","_changeFog","_changeBackground","Float32Array","random","GROUND","WATER","G_W_1","G_W_2","G_W_3","G_W_4","G_W_5","G_W_6","G_W_7","G_W_8","G_W_9","G_W_10","makeRotatedTiles","src","arr","r","j","k","ARR","prepareTile","t","n","w","e","tile","ARR_TILES","MAP","S","sS","H","createDataG","v","c","ii","jj","col","n2","col1","max","GAME_MODULES","gameContext","appWrapper","querySelector","openAppFullScreenIfMobile","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","style","fontSize","min","fullscreenElement","emit","frameUpdater","dispatcher","studio","system_PlayerMoveOnLevel","ui","player","compareSide","s1","s2","fillMap","startIndex","floor","ind","isCompare","result","createMap","changeEnvironment","on","TWEEN","addSegment","m","d","vertices","g","setAttribute","computeVertexNormals","colors","side","vertexColors","createMeshByMap","pipeLineForInit"],"mappings":"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","file":"static/js/main.18a49010.chunk.js","sourcesContent":["export async function pipeLineForInit (gameModules, CONSTANTS) {\r\n    const root = { CONSTANTS }\r\n\r\n    initModulesByState('pageLoaded', gameModules, root)\r\n\r\n    const { loaderAssets } = root\r\n\r\n    //const dataToLoad = getAssetsFromModulesData(gameModules)\r\n    //root.assets = await loaderAssets.loadAssets(dataToLoad)\r\n\r\n    initModulesByState('beforeStartPlay', gameModules, root)\r\n}\r\n\r\n\r\nconst initModulesByState = (state, modulesData, root) => {\r\n    for (let i = 0; i < modulesData.length; ++i) {\r\n        const {  key, constr, initStateKey } = modulesData[i]\r\n        initStateKey === state && (root[key] = new constr(root))\r\n    }\r\n}\r\n\r\nconst getAssetsFromModulesData = modulesData => {\r\n    const arr = []\r\n    for (let i = 0; i < modulesData.length; ++i) {\r\n        if (modulesData[i].assetsToLoad && modulesData[i].assetsToLoad.length) {\r\n            for (let j = 0; j < modulesData[i].assetsToLoad.length; ++j) {\r\n                arr.push(modulesData[i].assetsToLoad[j])\r\n            }\r\n        }\r\n    }\r\n    return arr\r\n}\r\n","import * as THREE from \"three\";\r\n\r\n\r\n\r\nexport const COLOR1_1 = [1, 1, 1]\r\nexport const COLOR1_6 = [...COLOR1_1, ...COLOR1_1, ...COLOR1_1, ...COLOR1_1, ...COLOR1_1, ...COLOR1_1]   \r\nexport const COLOR2_1 = [.5, 1, 0]\r\nexport const COLOR2_6 = [...COLOR2_1, ...COLOR2_1, ...COLOR2_1, ...COLOR2_1, ...COLOR2_1, ...COLOR2_1]\r\nexport const COLOR3_1 = [1, 1, 0]\r\nexport const COLOR3_6 = [...COLOR3_1, ...COLOR3_1, ...COLOR3_1, ...COLOR3_1, ...COLOR3_1, ...COLOR3_1]\r\n\r\n\r\n\r\nexport const MATERIALS_CONF = {\r\n    'iron': {\r\n        mat: 'MeshPhongMaterial',\r\n        props: {\r\n            color: 0x333333,\r\n            lightMap: 'ironAO',\r\n            lightMapIntensity: .35,\r\n            normalMap: 'ironNormal',\r\n            normalScale: new THREE.Vector2(.1, .1),\r\n            envMap: 'skyBox3',\r\n            reflectivity: .02,\r\n            shininess: 10,\r\n            specular: 0xffffff,\r\n            //vertexColors: true,\r\n        },\r\n    },\r\n    'iron2': {\r\n        mat: 'MeshPhongMaterial',\r\n        props: {\r\n            color: 0xcccccc,\r\n            lightMap: 'ironAO',\r\n            lightMapIntensity: .35,\r\n            normalMap: 'ironNormal',\r\n            normalScale: new THREE.Vector2(1, 1),\r\n            envMap: 'skyBox3',\r\n            reflectivity: .02,\r\n            shininess: 100,\r\n            specular: 0x020201,\r\n            //vertexColors: true,\r\n        },\r\n    },\r\n    'floorMat1': {\r\n        mat: 'MeshPhongMaterial',\r\n        props: {\r\n            color: 0xffffff,\r\n            map: 'mapTop',\r\n            bumpMap: 'mapTop',\r\n            bumpScale: 2,\r\n            reflectivity: 0.1,\r\n            shininess: .01,\r\n            specular: 0xffffff,\r\n            emissive: 0x555555,\r\n        },\r\n    },\r\n    'body': {\r\n        mat: 'MeshPhongMaterial',\r\n        props: {\r\n            color: 0xffffff,\r\n            envMap: 'skyBox3',\r\n            reflectivity: 3,\r\n            specular: 0xffffff,\r\n        },\r\n    },\r\n    'bodyRed': {\r\n        mat: 'MeshPhongMaterial',\r\n        props: {\r\n            color: 0xaa0000,\r\n            envMap: 'skyBox3',\r\n            emissive: 0x770000,\r\n            reflectivity: .01,\r\n            specular: 0xff0000,\r\n        },\r\n    },\r\n    'bodyShadow': {\r\n        mat: 'MeshBasicMaterial',\r\n        props: {\r\n            color: 0x222230,\r\n            transparent: true,\r\n            alphaMap: 'bodyDropShadow',\r\n            opacity: 1,\r\n        },\r\n    },\r\n    'whiteBasic': {\r\n        mat: 'MeshBasicMaterial',\r\n        props: {\r\n            color: 0xffffff,\r\n            //vertexColors: true,\r\n        }\r\n    },\r\n    'greenBasic': {\r\n        mat: 'MeshBasicMaterial',\r\n        props: {\r\n            color: 0x33ff55,\r\n            //vertexColors: true,\r\n        }\r\n    },\r\n    'whiteBasic2': {\r\n        mat: 'MeshBasicMaterial',\r\n        props: {\r\n            color: 0xaaaaaa,\r\n        }\r\n    },\r\n}","import { MATERIALS_CONF } from \"./constants_materials\";\r\n\r\nexport const SIZE_QUADRANT = 5000\r\nexport const LOCATIONS_QUADRANTS = {\r\n    //'-4_-1': 'location01',\r\n    '3_-3': 'location01',\r\n    '-3_-3': 'location02',\r\n    '3_3': 'location03',\r\n    '100_1000': 'locationToFinish',\r\n}\r\n\r\n\r\n\r\n\r\nexport const MATERIALS_CONFIG = MATERIALS_CONF\r\n\r\n\r\n\r\nexport const CONFIG_FOR_INIT = {\r\n    isInCar: false,\r\n    currentSceneConfig: {\r\n        isInVirtual: false,\r\n        isPlayerInCar: false,\r\n        carProps: {\r\n            keyMesh: 'car',\r\n            keyCollide: 'carCollision',\r\n            position: [0, -50, -100],\r\n            rotation: [0, 2, 0],\r\n        },\r\n        bodyProps: {\r\n            keyMesh: 'body',\r\n            position: [-20, -60, -50],\r\n            rotation: [0, 2, 0],\r\n        },\r\n    },\r\n}\r\n\r\n\r\n/** geometry column */\r\nexport const lCol = [.3, 1, .3]\r\nexport const lW = .2\r\n\r\nexport const ENV_START =  { fogNear: 0, fogFar: 0, colorFog: 0x455861, colorBack: 0x455861, backgroundImgKey: null }\r\nexport const ENV_NORMAL =  { fogNear: 0, fogFar: 1000, colorFog: 0x455861, colorBack: 0x455861, backgroundImgKey: null }\r\nexport const ENV_RED = { fogNear: 0, fogFar: 1000, colorFog: 0x880000, colorBack: 0x010101, backgroundImgKey: null }\r\nexport const ENV_RED_NEAR = { fogNear: 0, fogFar: 40, colorFog: 0x880000, colorBack: 0x010101, backgroundImgKey: null }\r\nexport const ENV_END =  { fogNear: 0, fogFar: 0, colorFog: 0x010101, colorBack: 0x010101, backgroundImgKey: null }\r\n\r\n\r\nexport const START_ENV_CONFIG = { fogNear: 0, fogFar: 0, color: 0x4a0a46, backgroundImgKey: null }\r\n//export const ENV_CONFIG_WORD_1 = { fogNear: 100, fogFar: 500, color: 0x455861, backgroundImgKey: 'skyBox2' }\r\nexport const ENV_CONFIG_WORD_1 = { fogNear: 0, fogFar: 1000, color: 0x455861, backgroundImgKey: null }\r\nexport const ENV_CONFIG_WORD_2 = { fogNear: 1500, fogFar: 3000, color: 0x000000, backgroundImgKey: 'skyBox' }\r\n\r\n\r\nexport const studioConfig = {\r\n    canId: 'webgl-canvas',\r\n    rendererCon: {\r\n        antialias: true\r\n    },\r\n    amb: {\r\n        color: 0xffffff,\r\n        strength: 0.1,\r\n    },\r\n    sceneEnvironment: START_ENV_CONFIG,\r\n    composerAddPass: 'Saturate',\r\n    //composerAddPass: 'Saturate2',\r\n}\r\n\r\n\r\n\r\n\r\nexport const playerConfig = {\r\n    speed: 0.8,\r\n    speedRot: 0.02,\r\n    speedDown: -0.45,\r\n    offsetFromFloor: 10.0,\r\n    offsetFromFloorFactor: 0.5,\r\n    offsetWallCollision: 3.5,\r\n    level: -13,\r\n    //startPos: [0, -45, 400],\r\n    startPos: [0, -45, 150],\r\n    cameraData: {\r\n        fov: 90,\r\n        ratio: window.innerWidth / window.innerHeight,\r\n        near: 0.1,\r\n        far: 10000,\r\n        pos: [0, 2, -0.5],\r\n    },\r\n    frontObjPos: [0, 0, -1],\r\n    backObjPos: [0, 0, 1],\r\n   lightDataOne: {\r\n        // color: 0x888888,\r\n        // strength: 1,\r\n        // dist: 0,\r\n        // decay: .001,\r\n        // pos: [0, 10, 0],\r\n        color: 0x555555,\r\n        strength: 1,\r\n        dist: 0,\r\n        decay: .001,\r\n        pos: [0, 10, 0],\r\n    },\r\n}\r\n","export class EventEmitter {\r\n    constructor() {\r\n        this._storage = {}\r\n    }\r\n\r\n    emit (id) {\r\n        return data => getOrCreateArrFromObj(this._storage)(id).forEach(action => action(data))\r\n    }\r\n\r\n    subscribe (id) {\r\n        return callback => {\r\n            getOrCreateArrFromObj(this._storage)(id).push(callback)\r\n            return () => this._storage[id] = this._storage[id].filter(item => item !== callback)\r\n        }\r\n    }\r\n\r\n    showAll () {\r\n        const s = {}\r\n        for (let key in this._storage) {\r\n            s[key] = this._storage[key].length\r\n        }\r\n        console.log(s)\r\n    }\r\n}\r\n\r\n\r\nconst getOrCreateArrFromObj = obj => key => obj[key] = obj[key] || []\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import * as R from 'ramda'\r\n\r\n\r\nexport class FrameUpdater {\r\n    constructor () {\r\n        this._subscribers = []\r\n\r\n\r\n        let data = {\r\n            time: 0,\r\n            delta: 0,\r\n            count: 0,\r\n            oldTime: 0\r\n        }\r\n\r\n        const getDataFromGlobalVar = () => data\r\n\r\n        const updateTime = data => {\r\n            data.time = Date.now()\r\n            return data\r\n        }\r\n\r\n        const updateDelta = data => {\r\n            data.delta = (data.time - data.oldTime) * 0.001\r\n            if (isNaN(data.delta) || data.delta > 1000 || data.delta === 0 ) {\r\n                data.delta = 1000 / 60 * 0.001\r\n            }\r\n            return data\r\n        }\r\n\r\n        const updateCount = data => {\r\n            data.count = data.delta / (1/60)\r\n            return data\r\n        }\r\n\r\n        // const emit = data => {\r\n        //     emitFrameUpdate(data)\r\n        //     return data\r\n        // }\r\n\r\n        const updateOldTime = data => {\r\n            data.oldTime = data.time\r\n            return data\r\n        }\r\n\r\n        const saveDataInGlobalVar = dataFromChine => {\r\n            data = dataFromChine\r\n            return data\r\n        }\r\n\r\n        const updateSubscribers = data => {\r\n            for (let i = 0; i < this._subscribers.length; ++i) {\r\n                this._subscribers[i]({...data })\r\n            }\r\n            return data;\r\n        }\r\n\r\n        const update = R.pipe(\r\n            getDataFromGlobalVar,\r\n            updateTime,\r\n            updateDelta,\r\n            updateCount,\r\n            updateSubscribers,\r\n            updateOldTime,\r\n            saveDataInGlobalVar\r\n        )\r\n\r\n        const animate = () => {\r\n            requestAnimationFrame(animate)\r\n            update(data)\r\n        }\r\n        animate()\r\n    }\r\n\r\n    on (fn) {\r\n        this._subscribers.push(fn)\r\n        return () => {\r\n            this._subscribers = this._subscribers.filter(item => item !== fn)\r\n        }\r\n    }\r\n}","import * as THREE from 'three'\r\nimport * as TWEEN from '@tweenjs/tween.js'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js'\r\nimport { Saturate } from '../../../_CORE/shaders/saturate'\r\nimport { Saturate2 } from '../../../_CORE/shaders/saturate2'\r\n\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\n\r\n\r\n\r\nexport class Studio {\r\n    constructor(root) {\r\n        this._root = root\r\n        const { assets, emitter, } = root\r\n        const { canId, rendererCon } = root.CONSTANTS.studioConfig\r\n\r\n        rendererCon.canvas = document.getElementById(canId)\r\n\r\n        this._renderer = new THREE.WebGLRenderer(rendererCon)\r\n        //this._renderer.outputEncoding = THREE.sRGBEncoding;\r\n        //this._renderer.setClearColor(clearColor)\r\n        this._renderer.setClearColor(0x000000)\r\n        this._renderer.setPixelRatio(window.devicePixelRatio)\r\n        this._renderer.setSize(window.innerWidth, window.innerHeight)\r\n\r\n        this._scene = new THREE.Scene()\r\n\r\n        // {\r\n        //     const { color, fogNear, fogFar, backgroundImgKey } = root.CONSTANTS.studioConfig.sceneEnvironment\r\n        //     this._scene.background = assets[backgroundImgKey] || null\r\n        //     this._scene.fog = new THREE.Fog(color, fogNear, fogFar)\r\n        // }\r\n\r\n        //this._lightA = new THREE.AmbientLight(0x455861, 1)\r\n        this._lightA = new THREE.AmbientLight(0x777777, 2)\r\n        this._scene.add( this._lightA )\r\n\r\n        const l = new THREE.DirectionalLight(0xffffff, 2)\r\n        // l.rotation.x = -1\r\n        // l.rotation.z = -2\r\n        this._scene.add(l)\r\n        const targetObject = new THREE.Object3D();\r\n        this._scene.add(targetObject);\r\n        l.target = targetObject;\r\n        targetObject.position.x = -1\r\n\r\n\r\n        this._playerCamera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 5000)\r\n        this._controlsCamera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 5000)\r\n        this._controlsCamera.position.set(0, 500, -100)\r\n        const controls = new OrbitControls(this._controlsCamera, this._renderer.domElement)\r\n        controls.target.set(0, 0, 0)\r\n        controls.update();\r\n\r\n\r\n        // this._composer = new EffectComposer(this._renderer)\r\n        // this._renderPass = new RenderPass(this._scene, this._controlsCamera)\r\n        // this._composer.addPass(this._renderPass)\r\n        // if (this._root.CONSTANTS.studioConfig.composerAddPass) {\r\n        //     if (this._root.CONSTANTS.studioConfig.composerAddPass === 'Saturate') {\r\n        //         this._composer.addPass(new ShaderPass(Saturate))\r\n        //     }\r\n        //     if (this._root.CONSTANTS.studioConfig.composerAddPass === 'Saturate2') {\r\n        //         this._composer.addPass(new ShaderPass(Saturate2))\r\n        //     }\r\n        // }\r\n\r\n\r\n\r\n        /** toggle view camera to debug by orbitControls */\r\n        const vec3 = new THREE.Vector3()\r\n        let isPlayerView = true\r\n        let saveFogData = null\r\n\r\n\r\n        const toggleView = () => {\r\n            if (isPlayerView) {\r\n                //saveFogData = { ...this._scene.fog }\r\n                //this._scene.fog.near = 10000\r\n                //this._scene.fog.far = 20000\r\n                isPlayerView = false\r\n\r\n                //this._renderPass.camera = this._controlsCamera\r\n                this._playerCamera.getWorldPosition(vec3)\r\n                //this._controlsCamera.position.x = vec3.x + 100\r\n                //this._controlsCamera.position.y = vec3.y + 100\r\n                //this._controlsCamera.position.z = vec3.z\r\n                //controls.target.set(vec3.x, vec3.y, vec3.z)\r\n                controls.update()\r\n\r\n                // this._scene.fog.near = saveFogData.near\r\n                // this._scene.fog.far = saveFogData.far\r\n\r\n            } else {\r\n                //this._scene.fog.near = saveFogData.near\r\n                //this._scene.fog.far = saveFogData.far\r\n                isPlayerView = true\r\n                this._renderPass.camera = this._playerCamera\r\n            }\r\n        }\r\n\r\n        emitter.subscribe('keyEvent')(data => {\r\n            if (!data['o']) {\r\n                return;\r\n            }\r\n\r\n            toggleView()\r\n        })\r\n\r\n\r\n\r\n        const resize = () => {\r\n            const size = { width: window.innerWidth, height: window.innerHeight }\r\n            this._renderer.setSize(size.width, size.height)\r\n            // this._composer.setSize(size.width, size.height)\r\n            if (this._controlsCamera) {\r\n                this._controlsCamera.aspect = size.width / size.height\r\n                this._controlsCamera.updateProjectionMatrix()\r\n            }\r\n            if (this._playerCamera) {\r\n                this._playerCamera.aspect = size.width/size.height\r\n                this._playerCamera.updateProjectionMatrix()\r\n            }\r\n        }\r\n        window.addEventListener('resize', resize)\r\n        resize()\r\n\r\n\r\n\r\n\r\n        this.addToScene = mesh => this._scene.add(mesh)\r\n        this.removeFromScene = mesh => this._scene.remove(mesh)\r\n\r\n\r\n\r\n        let f = 0\r\n        this.drawFrame = () => {\r\n            f += 0.01\r\n            l.position.x = Math.sin(f) * 5\r\n            l.position.z = Math.cos(f) * 5\r\n            this._renderer.render(this._scene, this._controlsCamera)\r\n           // this._composer.render(this._scene, this._controlsCamera)\r\n        }\r\n\r\n\r\n        //this._backgroundImgKey = root.CONSTANTS.studioConfig.sceneEnvironment.backgroundImgKey\r\n        emitter.subscribe('changeSceneEnvironment')(sceneEnvironment => {\r\n            console.log('deprecated!!', 'studio', 'changeSceneEnvironment', sceneEnvironment)\r\n        })\r\n\r\n\r\n        setTimeout(() => { toggleView() }, 200)\r\n    }\r\n\r\n\r\n    /** PUBLIC ****************************************/\r\n\r\n    setCamera (cam) {\r\n        cam.aspect = window.innerWidth / window.innerHeight\r\n        cam.updateProjectionMatrix()\r\n        this._playerCamera = cam\r\n        //this._renderPass.camera = this._playerCamera\r\n    }\r\n\r\n\r\n    changeEnvironment (sceneEnvironment, conf = null) {\r\n        this._changeFog(sceneEnvironment, conf)\r\n        this._changeBackground(sceneEnvironment, conf)\r\n    }\r\n\r\n\r\n    /** INTERNAL ****************************************/\r\n\r\n    _changeFog (sceneEnvironment, conf) {\r\n        // const { fogNear, fogFar, colorFog } = sceneEnvironment\r\n        // if (\r\n        //     this._scene.fog.near !== fogNear ||\r\n        //     this._scene.fog.far !== fogFar ||\r\n        //     this._scene.fog.color !== fogFar\r\n        // ) {\r\n        //     const startData = {\r\n        //         colorFog: this._scene.fog.color,\r\n        //         near: this._scene.fog.near,\r\n        //         far: this._scene.fog.far,\r\n        //     }\r\n        //     const endData = {\r\n        //         colorFog: new THREE.Color(colorFog),\r\n        //         near: fogNear,\r\n        //         far: fogFar,\r\n        //     }\r\n        //\r\n        //     new TWEEN.Tween(startData)\r\n        //         .to(endData, (conf && conf.time) || 3000)\r\n        //         .onUpdate(() => {\r\n        //             this._scene.fog.color = startData.colorFog\r\n        //             this._scene.fog.near = startData.near\r\n        //             this._scene.fog.far = startData.far\r\n        //             if (conf) {\r\n        //                 //                 if (conf.updateAmb) this._lightA.color = startData.color\r\n        //             } else {\r\n        //                 //                 this._lightA.color = startData.color\r\n        //             }\r\n        //             //this._renderer.setClearColor(startData.color)\r\n        //         })\r\n        //         .onComplete(() => {\r\n        //             this._renderer.setClearColor(sceneEnvironment.colorBack)\r\n        //         })\r\n        //         .start()\r\n        // }\r\n\r\n    }\r\n\r\n\r\n    _changeBackground (sceneEnvironment) {\r\n        // const { backgroundImgKey } = sceneEnvironment\r\n        //\r\n        // if (backgroundImgKey !== this._backgroundImgKey) {\r\n        //     this._backgroundImgKey = backgroundImgKey\r\n        //     this._scene.background = this._root.assets[backgroundImgKey] || null\r\n        // }\r\n    }\r\n}\r\n\r\n","/*\r\n * Copyright 2021 GFXFundamentals.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are\r\n * met:\r\n *\r\n *     * Redistributions of source code must retain the above copyright\r\n * notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above\r\n * copyright notice, this list of conditions and the following disclaimer\r\n * in the documentation and/or other materials provided with the\r\n * distribution.\r\n *     * Neither the name of GFXFundamentals. nor the names of his\r\n * contributors may be used to endorse or promote products derived from\r\n * this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n\r\n    /**\r\n     * An array or typed array with 3 values.\r\n     * @typedef {number[]|TypedArray} Vector3\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n\r\n    /**\r\n     * An array or typed array with 4 values.\r\n     * @typedef {number[]|TypedArray} Vector4\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n\r\n    /**\r\n     * An array or typed array with 16 values.\r\n     * @typedef {number[]|TypedArray} Matrix4\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n\r\n\r\n    let MatType = Float32Array;\r\n\r\n    /**\r\n     * Sets the type this library creates for a Mat4\r\n     * @param {constructor} Ctor the constructor for the type. Either `Float32Array` or `Array`\r\n     * @return {constructor} previous constructor for Mat4\r\n     */\r\n    function setDefaultType(Ctor) {\r\n        const OldType = MatType;\r\n        MatType = Ctor;\r\n        return OldType;\r\n    }\r\n\r\n    /**\r\n     * Takes two 4-by-4 matrices, a and b, and computes the product in the order\r\n     * that pre-composes b with a.  In other words, the matrix returned will\r\n     * transform by b first and then a.  Note this is subtly different from just\r\n     * multiplying the matrices together.  For given a and b, this function returns\r\n     * the same object in both row-major and column-major mode.\r\n     * @param {Matrix4} a A matrix.\r\n     * @param {Matrix4} b A matrix.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    function multiply(a, b, dst) {\r\n        dst = dst || new MatType(16);\r\n        var b00 = b[0 * 4 + 0];\r\n        var b01 = b[0 * 4 + 1];\r\n        var b02 = b[0 * 4 + 2];\r\n        var b03 = b[0 * 4 + 3];\r\n        var b10 = b[1 * 4 + 0];\r\n        var b11 = b[1 * 4 + 1];\r\n        var b12 = b[1 * 4 + 2];\r\n        var b13 = b[1 * 4 + 3];\r\n        var b20 = b[2 * 4 + 0];\r\n        var b21 = b[2 * 4 + 1];\r\n        var b22 = b[2 * 4 + 2];\r\n        var b23 = b[2 * 4 + 3];\r\n        var b30 = b[3 * 4 + 0];\r\n        var b31 = b[3 * 4 + 1];\r\n        var b32 = b[3 * 4 + 2];\r\n        var b33 = b[3 * 4 + 3];\r\n        var a00 = a[0 * 4 + 0];\r\n        var a01 = a[0 * 4 + 1];\r\n        var a02 = a[0 * 4 + 2];\r\n        var a03 = a[0 * 4 + 3];\r\n        var a10 = a[1 * 4 + 0];\r\n        var a11 = a[1 * 4 + 1];\r\n        var a12 = a[1 * 4 + 2];\r\n        var a13 = a[1 * 4 + 3];\r\n        var a20 = a[2 * 4 + 0];\r\n        var a21 = a[2 * 4 + 1];\r\n        var a22 = a[2 * 4 + 2];\r\n        var a23 = a[2 * 4 + 3];\r\n        var a30 = a[3 * 4 + 0];\r\n        var a31 = a[3 * 4 + 1];\r\n        var a32 = a[3 * 4 + 2];\r\n        var a33 = a[3 * 4 + 3];\r\n        dst[ 0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;\r\n        dst[ 1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;\r\n        dst[ 2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;\r\n        dst[ 3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;\r\n        dst[ 4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;\r\n        dst[ 5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;\r\n        dst[ 6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;\r\n        dst[ 7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;\r\n        dst[ 8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;\r\n        dst[ 9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;\r\n        dst[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;\r\n        dst[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;\r\n        dst[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;\r\n        dst[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;\r\n        dst[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;\r\n        dst[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;\r\n        return dst;\r\n    }\r\n\r\n\r\n    /**\r\n     * adds 2 vectors3s\r\n     * @param {Vector3} a a\r\n     * @param {Vector3} b b\r\n     * @param {Vector3} dst optional vector3 to store result\r\n     * @return {Vector3} dst or new Vector3 if not provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function addVectors(a, b, dst) {\r\n        dst = dst || new MatType(3);\r\n        dst[0] = a[0] + b[0];\r\n        dst[1] = a[1] + b[1];\r\n        dst[2] = a[2] + b[2];\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * subtracts 2 vectors3s\r\n     * @param {Vector3} a a\r\n     * @param {Vector3} b b\r\n     * @param {Vector3} dst optional vector3 to store result\r\n     * @return {Vector3} dst or new Vector3 if not provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function subtractVectors(a, b, dst) {\r\n        dst = dst || new MatType(3);\r\n        dst[0] = a[0] - b[0];\r\n        dst[1] = a[1] - b[1];\r\n        dst[2] = a[2] - b[2];\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * scale vectors3\r\n     * @param {Vector3} v vector\r\n     * @param {Number} s scale\r\n     * @param {Vector3} dst optional vector3 to store result\r\n     * @return {Vector3} dst or new Vector3 if not provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function scaleVector(v, s, dst) {\r\n        dst = dst || new MatType(3);\r\n        dst[0] = v[0] * s;\r\n        dst[1] = v[1] * s;\r\n        dst[2] = v[2] * s;\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * normalizes a vector.\r\n     * @param {Vector3} v vector to normalize\r\n     * @param {Vector3} dst optional vector3 to store result\r\n     * @return {Vector3} dst or new Vector3 if not provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function normalize(v, dst) {\r\n        dst = dst || new MatType(3);\r\n        var length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\r\n        // make sure we don't divide by 0.\r\n        if (length > 0.00001) {\r\n            dst[0] = v[0] / length;\r\n            dst[1] = v[1] / length;\r\n            dst[2] = v[2] / length;\r\n        }\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Computes the length of a vector\r\n     * @param {Vector3} v vector to take length of\r\n     * @return {number} length of vector\r\n     */\r\n    function length(v) {\r\n        return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\r\n    }\r\n\r\n    /**\r\n     * Computes the length squared of a vector\r\n     * @param {Vector3} v vector to take length of\r\n     * @return {number} length sqaured of vector\r\n     */\r\n    function lengthSq(v) {\r\n        return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\r\n    }\r\n\r\n    /**\r\n     * Computes the cross product of 2 vectors3s\r\n     * @param {Vector3} a a\r\n     * @param {Vector3} b b\r\n     * @param {Vector3} dst optional vector3 to store result\r\n     * @return {Vector3} dst or new Vector3 if not provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function cross(a, b, dst) {\r\n        dst = dst || new MatType(3);\r\n        dst[0] = a[1] * b[2] - a[2] * b[1];\r\n        dst[1] = a[2] * b[0] - a[0] * b[2];\r\n        dst[2] = a[0] * b[1] - a[1] * b[0];\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Computes the dot product of two vectors; assumes both vectors have\r\n     * three entries.\r\n     * @param {Vector3} a Operand vector.\r\n     * @param {Vector3} b Operand vector.\r\n     * @return {number} dot product\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function dot(a, b) {\r\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\r\n    }\r\n\r\n    /**\r\n     * Computes the distance squared between 2 points\r\n     * @param {Vector3} a\r\n     * @param {Vector3} b\r\n     * @return {number} distance squared between a and b\r\n     */\r\n    function distanceSq(a, b) {\r\n        const dx = a[0] - b[0];\r\n        const dy = a[1] - b[1];\r\n        const dz = a[2] - b[2];\r\n        return dx * dx + dy * dy + dz * dz;\r\n    }\r\n\r\n    /**\r\n     * Computes the distance between 2 points\r\n     * @param {Vector3} a\r\n     * @param {Vector3} b\r\n     * @return {number} distance between a and b\r\n     */\r\n    function distance(a, b) {\r\n        return Math.sqrt(distanceSq(a, b));\r\n    }\r\n\r\n    /**\r\n     * Makes an identity matrix.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function identity(dst) {\r\n        dst = dst || new MatType(16);\r\n\r\n        dst[ 0] = 1;\r\n        dst[ 1] = 0;\r\n        dst[ 2] = 0;\r\n        dst[ 3] = 0;\r\n        dst[ 4] = 0;\r\n        dst[ 5] = 1;\r\n        dst[ 6] = 0;\r\n        dst[ 7] = 0;\r\n        dst[ 8] = 0;\r\n        dst[ 9] = 0;\r\n        dst[10] = 1;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Transposes a matrix.\r\n     * @param {Matrix4} m matrix to transpose.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function transpose(m, dst) {\r\n        dst = dst || new MatType(16);\r\n\r\n        dst[ 0] = m[0];\r\n        dst[ 1] = m[4];\r\n        dst[ 2] = m[8];\r\n        dst[ 3] = m[12];\r\n        dst[ 4] = m[1];\r\n        dst[ 5] = m[5];\r\n        dst[ 6] = m[9];\r\n        dst[ 7] = m[13];\r\n        dst[ 8] = m[2];\r\n        dst[ 9] = m[6];\r\n        dst[10] = m[10];\r\n        dst[11] = m[14];\r\n        dst[12] = m[3];\r\n        dst[13] = m[7];\r\n        dst[14] = m[11];\r\n        dst[15] = m[15];\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Creates a lookAt matrix.\r\n     * This is a world matrix for a camera. In other words it will transform\r\n     * from the origin to a place and orientation in the world. For a view\r\n     * matrix take the inverse of this.\r\n     * @param {Vector3} cameraPosition position of the camera\r\n     * @param {Vector3} target position of the target\r\n     * @param {Vector3} up direction\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function lookAt(cameraPosition, target, up, dst) {\r\n        dst = dst || new MatType(16);\r\n        var zAxis = normalize(\r\n            subtractVectors(cameraPosition, target));\r\n        var xAxis = normalize(cross(up, zAxis));\r\n        var yAxis = normalize(cross(zAxis, xAxis));\r\n\r\n        dst[ 0] = xAxis[0];\r\n        dst[ 1] = xAxis[1];\r\n        dst[ 2] = xAxis[2];\r\n        dst[ 3] = 0;\r\n        dst[ 4] = yAxis[0];\r\n        dst[ 5] = yAxis[1];\r\n        dst[ 6] = yAxis[2];\r\n        dst[ 7] = 0;\r\n        dst[ 8] = zAxis[0];\r\n        dst[ 9] = zAxis[1];\r\n        dst[10] = zAxis[2];\r\n        dst[11] = 0;\r\n        dst[12] = cameraPosition[0];\r\n        dst[13] = cameraPosition[1];\r\n        dst[14] = cameraPosition[2];\r\n        dst[15] = 1;\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\r\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\r\n     * arguments define a frustum extending in the negative z direction.  The given\r\n     * angle is the vertical angle of the frustum, and the horizontal angle is\r\n     * determined to produce the given aspect ratio.  The arguments near and far are\r\n     * the distances to the near and far clipping planes.  Note that near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\r\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\r\n     * from -1 to 1 in the z dimension.\r\n     * @param {number} fieldOfViewInRadians field of view in y axis.\r\n     * @param {number} aspect aspect of viewport (width / height)\r\n     * @param {number} near near Z clipping plane\r\n     * @param {number} far far Z clipping plane\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function perspective(fieldOfViewInRadians, aspect, near, far, dst) {\r\n        dst = dst || new MatType(16);\r\n        var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewInRadians);\r\n        var rangeInv = 1.0 / (near - far);\r\n\r\n        dst[ 0] = f / aspect;\r\n        dst[ 1] = 0;\r\n        dst[ 2] = 0;\r\n        dst[ 3] = 0;\r\n        dst[ 4] = 0;\r\n        dst[ 5] = f;\r\n        dst[ 6] = 0;\r\n        dst[ 7] = 0;\r\n        dst[ 8] = 0;\r\n        dst[ 9] = 0;\r\n        dst[10] = (near + far) * rangeInv;\r\n        dst[11] = -1;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = near * far * rangeInv * 2;\r\n        dst[15] = 0;\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Computes a 4-by-4 orthographic projection matrix given the coordinates of the\r\n     * planes defining the axis-aligned, box-shaped viewing volume.  The matrix\r\n     * generated sends that box to the unit box.  Note that although left and right\r\n     * are x coordinates and bottom and top are y coordinates, near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  We assume a unit box extending from -1 to 1 in the x and y\r\n     * dimensions and from -1 to 1 in the z dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function orthographic(left, right, bottom, top, near, far, dst) {\r\n        dst = dst || new MatType(16);\r\n\r\n        dst[ 0] = 2 / (right - left);\r\n        dst[ 1] = 0;\r\n        dst[ 2] = 0;\r\n        dst[ 3] = 0;\r\n        dst[ 4] = 0;\r\n        dst[ 5] = 2 / (top - bottom);\r\n        dst[ 6] = 0;\r\n        dst[ 7] = 0;\r\n        dst[ 8] = 0;\r\n        dst[ 9] = 0;\r\n        dst[10] = 2 / (near - far);\r\n        dst[11] = 0;\r\n        dst[12] = (left + right) / (left - right);\r\n        dst[13] = (bottom + top) / (bottom - top);\r\n        dst[14] = (near + far) / (near - far);\r\n        dst[15] = 1;\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\r\n     * top, bottom, near and far clipping planes. The arguments define a frustum\r\n     * extending in the negative z direction. The arguments near and far are the\r\n     * distances to the near and far clipping planes. Note that near and far are not\r\n     * z coordinates, but rather they are distances along the negative z-axis. The\r\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\r\n     * box extending from -1 to 1 in the x and y dimensions and from -1 to 1 in the z\r\n     * dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function frustum(left, right, bottom, top, near, far, dst) {\r\n        dst = dst || new MatType(16);\r\n\r\n        var dx = right - left;\r\n        var dy = top - bottom;\r\n        var dz = far - near;\r\n\r\n        dst[ 0] = 2 * near / dx;\r\n        dst[ 1] = 0;\r\n        dst[ 2] = 0;\r\n        dst[ 3] = 0;\r\n        dst[ 4] = 0;\r\n        dst[ 5] = 2 * near / dy;\r\n        dst[ 6] = 0;\r\n        dst[ 7] = 0;\r\n        dst[ 8] = (left + right) / dx;\r\n        dst[ 9] = (top + bottom) / dy;\r\n        dst[10] = -(far + near) / dz;\r\n        dst[11] = -1;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = -2 * near * far / dz;\r\n        dst[15] = 0;\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Makes a translation matrix\r\n     * @param {number} tx x translation.\r\n     * @param {number} ty y translation.\r\n     * @param {number} tz z translation.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function translation(tx, ty, tz, dst) {\r\n        dst = dst || new MatType(16);\r\n\r\n        dst[ 0] = 1;\r\n        dst[ 1] = 0;\r\n        dst[ 2] = 0;\r\n        dst[ 3] = 0;\r\n        dst[ 4] = 0;\r\n        dst[ 5] = 1;\r\n        dst[ 6] = 0;\r\n        dst[ 7] = 0;\r\n        dst[ 8] = 0;\r\n        dst[ 9] = 0;\r\n        dst[10] = 1;\r\n        dst[11] = 0;\r\n        dst[12] = tx;\r\n        dst[13] = ty;\r\n        dst[14] = tz;\r\n        dst[15] = 1;\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Multiply by translation matrix.\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {number} tx x translation.\r\n     * @param {number} ty y translation.\r\n     * @param {number} tz z translation.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function translate(m, tx, ty, tz, dst) {\r\n        // This is the optimized version of\r\n        // return multiply(m, translation(tx, ty, tz), dst);\r\n        dst = dst || new MatType(16);\r\n\r\n        var m00 = m[0];\r\n        var m01 = m[1];\r\n        var m02 = m[2];\r\n        var m03 = m[3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n\r\n        if (m !== dst) {\r\n            dst[ 0] = m00;\r\n            dst[ 1] = m01;\r\n            dst[ 2] = m02;\r\n            dst[ 3] = m03;\r\n            dst[ 4] = m10;\r\n            dst[ 5] = m11;\r\n            dst[ 6] = m12;\r\n            dst[ 7] = m13;\r\n            dst[ 8] = m20;\r\n            dst[ 9] = m21;\r\n            dst[10] = m22;\r\n            dst[11] = m23;\r\n        }\r\n\r\n        dst[12] = m00 * tx + m10 * ty + m20 * tz + m30;\r\n        dst[13] = m01 * tx + m11 * ty + m21 * tz + m31;\r\n        dst[14] = m02 * tx + m12 * ty + m22 * tz + m32;\r\n        dst[15] = m03 * tx + m13 * ty + m23 * tz + m33;\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Makes an x rotation matrix\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function xRotation(angleInRadians, dst) {\r\n        dst = dst || new MatType(16);\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n\r\n        dst[ 0] = 1;\r\n        dst[ 1] = 0;\r\n        dst[ 2] = 0;\r\n        dst[ 3] = 0;\r\n        dst[ 4] = 0;\r\n        dst[ 5] = c;\r\n        dst[ 6] = s;\r\n        dst[ 7] = 0;\r\n        dst[ 8] = 0;\r\n        dst[ 9] = -s;\r\n        dst[10] = c;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Multiply by an x rotation matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function xRotate(m, angleInRadians, dst) {\r\n        // this is the optimized version of\r\n        // return multiply(m, xRotation(angleInRadians), dst);\r\n        dst = dst || new MatType(16);\r\n\r\n        var m10 = m[4];\r\n        var m11 = m[5];\r\n        var m12 = m[6];\r\n        var m13 = m[7];\r\n        var m20 = m[8];\r\n        var m21 = m[9];\r\n        var m22 = m[10];\r\n        var m23 = m[11];\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n\r\n        dst[4]  = c * m10 + s * m20;\r\n        dst[5]  = c * m11 + s * m21;\r\n        dst[6]  = c * m12 + s * m22;\r\n        dst[7]  = c * m13 + s * m23;\r\n        dst[8]  = c * m20 - s * m10;\r\n        dst[9]  = c * m21 - s * m11;\r\n        dst[10] = c * m22 - s * m12;\r\n        dst[11] = c * m23 - s * m13;\r\n\r\n        if (m !== dst) {\r\n            dst[ 0] = m[ 0];\r\n            dst[ 1] = m[ 1];\r\n            dst[ 2] = m[ 2];\r\n            dst[ 3] = m[ 3];\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Makes an y rotation matrix\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function yRotation(angleInRadians, dst) {\r\n        dst = dst || new MatType(16);\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n\r\n        dst[ 0] = c;\r\n        dst[ 1] = 0;\r\n        dst[ 2] = -s;\r\n        dst[ 3] = 0;\r\n        dst[ 4] = 0;\r\n        dst[ 5] = 1;\r\n        dst[ 6] = 0;\r\n        dst[ 7] = 0;\r\n        dst[ 8] = s;\r\n        dst[ 9] = 0;\r\n        dst[10] = c;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Multiply by an y rotation matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function yRotate(m, angleInRadians, dst) {\r\n        // this is the optimized version of\r\n        // return multiply(m, yRotation(angleInRadians), dst);\r\n        dst = dst || new MatType(16);\r\n\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n\r\n        dst[ 0] = c * m00 - s * m20;\r\n        dst[ 1] = c * m01 - s * m21;\r\n        dst[ 2] = c * m02 - s * m22;\r\n        dst[ 3] = c * m03 - s * m23;\r\n        dst[ 8] = c * m20 + s * m00;\r\n        dst[ 9] = c * m21 + s * m01;\r\n        dst[10] = c * m22 + s * m02;\r\n        dst[11] = c * m23 + s * m03;\r\n\r\n        if (m !== dst) {\r\n            dst[ 4] = m[ 4];\r\n            dst[ 5] = m[ 5];\r\n            dst[ 6] = m[ 6];\r\n            dst[ 7] = m[ 7];\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Makes an z rotation matrix\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function zRotation(angleInRadians, dst) {\r\n        dst = dst || new MatType(16);\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n\r\n        dst[ 0] = c;\r\n        dst[ 1] = s;\r\n        dst[ 2] = 0;\r\n        dst[ 3] = 0;\r\n        dst[ 4] = -s;\r\n        dst[ 5] = c;\r\n        dst[ 6] = 0;\r\n        dst[ 7] = 0;\r\n        dst[ 8] = 0;\r\n        dst[ 9] = 0;\r\n        dst[10] = 1;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Multiply by an z rotation matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function zRotate(m, angleInRadians, dst) {\r\n        // This is the optimized version of\r\n        // return multiply(m, zRotation(angleInRadians), dst);\r\n        dst = dst || new MatType(16);\r\n\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n\r\n        dst[ 0] = c * m00 + s * m10;\r\n        dst[ 1] = c * m01 + s * m11;\r\n        dst[ 2] = c * m02 + s * m12;\r\n        dst[ 3] = c * m03 + s * m13;\r\n        dst[ 4] = c * m10 - s * m00;\r\n        dst[ 5] = c * m11 - s * m01;\r\n        dst[ 6] = c * m12 - s * m02;\r\n        dst[ 7] = c * m13 - s * m03;\r\n\r\n        if (m !== dst) {\r\n            dst[ 8] = m[ 8];\r\n            dst[ 9] = m[ 9];\r\n            dst[10] = m[10];\r\n            dst[11] = m[11];\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Makes an rotation matrix around an arbitrary axis\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function axisRotation(axis, angleInRadians, dst) {\r\n        dst = dst || new MatType(16);\r\n\r\n        var x = axis[0];\r\n        var y = axis[1];\r\n        var z = axis[2];\r\n        var n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        var xx = x * x;\r\n        var yy = y * y;\r\n        var zz = z * z;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        var oneMinusCosine = 1 - c;\r\n\r\n        dst[ 0] = xx + (1 - xx) * c;\r\n        dst[ 1] = x * y * oneMinusCosine + z * s;\r\n        dst[ 2] = x * z * oneMinusCosine - y * s;\r\n        dst[ 3] = 0;\r\n        dst[ 4] = x * y * oneMinusCosine - z * s;\r\n        dst[ 5] = yy + (1 - yy) * c;\r\n        dst[ 6] = y * z * oneMinusCosine + x * s;\r\n        dst[ 7] = 0;\r\n        dst[ 8] = x * z * oneMinusCosine + y * s;\r\n        dst[ 9] = y * z * oneMinusCosine - x * s;\r\n        dst[10] = zz + (1 - zz) * c;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Multiply by an axis rotation matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function axisRotate(m, axis, angleInRadians, dst) {\r\n        // This is the optimized version of\r\n        // return multiply(m, axisRotation(axis, angleInRadians), dst);\r\n        dst = dst || new MatType(16);\r\n\r\n        var x = axis[0];\r\n        var y = axis[1];\r\n        var z = axis[2];\r\n        var n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        var xx = x * x;\r\n        var yy = y * y;\r\n        var zz = z * z;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        var oneMinusCosine = 1 - c;\r\n\r\n        var r00 = xx + (1 - xx) * c;\r\n        var r01 = x * y * oneMinusCosine + z * s;\r\n        var r02 = x * z * oneMinusCosine - y * s;\r\n        var r10 = x * y * oneMinusCosine - z * s;\r\n        var r11 = yy + (1 - yy) * c;\r\n        var r12 = y * z * oneMinusCosine + x * s;\r\n        var r20 = x * z * oneMinusCosine + y * s;\r\n        var r21 = y * z * oneMinusCosine - x * s;\r\n        var r22 = zz + (1 - zz) * c;\r\n\r\n        var m00 = m[0];\r\n        var m01 = m[1];\r\n        var m02 = m[2];\r\n        var m03 = m[3];\r\n        var m10 = m[4];\r\n        var m11 = m[5];\r\n        var m12 = m[6];\r\n        var m13 = m[7];\r\n        var m20 = m[8];\r\n        var m21 = m[9];\r\n        var m22 = m[10];\r\n        var m23 = m[11];\r\n\r\n        dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\r\n        dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\r\n        dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\r\n        dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\r\n        dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\r\n        dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\r\n        dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\r\n        dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\r\n        dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\r\n        dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\r\n        dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\r\n        dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\r\n\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Makes a scale matrix\r\n     * @param {number} sx x scale.\r\n     * @param {number} sy y scale.\r\n     * @param {number} sz z scale.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function scaling(sx, sy, sz, dst) {\r\n        dst = dst || new MatType(16);\r\n\r\n        dst[ 0] = sx;\r\n        dst[ 1] = 0;\r\n        dst[ 2] = 0;\r\n        dst[ 3] = 0;\r\n        dst[ 4] = 0;\r\n        dst[ 5] = sy;\r\n        dst[ 6] = 0;\r\n        dst[ 7] = 0;\r\n        dst[ 8] = 0;\r\n        dst[ 9] = 0;\r\n        dst[10] = sz;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Multiply by a scaling matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {number} sx x scale.\r\n     * @param {number} sy y scale.\r\n     * @param {number} sz z scale.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function scale(m, sx, sy, sz, dst) {\r\n        // This is the optimized version of\r\n        // return multiply(m, scaling(sx, sy, sz), dst);\r\n        dst = dst || new MatType(16);\r\n\r\n        dst[ 0] = sx * m[0 * 4 + 0];\r\n        dst[ 1] = sx * m[0 * 4 + 1];\r\n        dst[ 2] = sx * m[0 * 4 + 2];\r\n        dst[ 3] = sx * m[0 * 4 + 3];\r\n        dst[ 4] = sy * m[1 * 4 + 0];\r\n        dst[ 5] = sy * m[1 * 4 + 1];\r\n        dst[ 6] = sy * m[1 * 4 + 2];\r\n        dst[ 7] = sy * m[1 * 4 + 3];\r\n        dst[ 8] = sz * m[2 * 4 + 0];\r\n        dst[ 9] = sz * m[2 * 4 + 1];\r\n        dst[10] = sz * m[2 * 4 + 2];\r\n        dst[11] = sz * m[2 * 4 + 3];\r\n\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * creates a matrix from translation, quaternion, scale\r\n     * @param {Number[]} translation [x, y, z] translation\r\n     * @param {Number[]} quaternion [x, y, z, z] quaternion rotation\r\n     * @param {Number[]} scale [x, y, z] scale\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    function compose(translation, quaternion, scale, dst) {\r\n        dst = dst || new MatType(16);\r\n\r\n        const x = quaternion[0];\r\n        const y = quaternion[1];\r\n        const z = quaternion[2];\r\n        const w = quaternion[3];\r\n\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n\r\n        const xx = x * x2;\r\n        const xy = x * y2;\r\n        const xz = x * z2;\r\n\r\n        const yy = y * y2;\r\n        const yz = y * z2;\r\n        const zz = z * z2;\r\n\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n\r\n        const sx = scale[0];\r\n        const sy = scale[1];\r\n        const sz = scale[2];\r\n\r\n        dst[0] = (1 - (yy + zz)) * sx;\r\n        dst[1] = (xy + wz) * sx;\r\n        dst[2] = (xz - wy) * sx;\r\n        dst[3] = 0;\r\n\r\n        dst[4] = (xy - wz) * sy;\r\n        dst[5] = (1 - (xx + zz)) * sy;\r\n        dst[6] = (yz + wx) * sy;\r\n        dst[7] = 0;\r\n\r\n        dst[ 8] = (xz + wy) * sz;\r\n        dst[ 9] = (yz - wx) * sz;\r\n        dst[10] = (1 - (xx + yy)) * sz;\r\n        dst[11] = 0;\r\n\r\n        dst[12] = translation[0];\r\n        dst[13] = translation[1];\r\n        dst[14] = translation[2];\r\n        dst[15] = 1;\r\n\r\n        return dst;\r\n    }\r\n\r\n    function quatFromRotationMatrix(m, dst) {\r\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n        const m11 = m[0];\r\n        const m12 = m[4];\r\n        const m13 = m[8];\r\n        const m21 = m[1];\r\n        const m22 = m[5];\r\n        const m23 = m[9];\r\n        const m31 = m[2];\r\n        const m32 = m[6];\r\n        const m33 = m[10];\r\n\r\n        const trace = m11 + m22 + m33;\r\n\r\n        if (trace > 0) {\r\n            const s = 0.5 / Math.sqrt(trace + 1);\r\n            dst[3] = 0.25 / s;\r\n            dst[0] = (m32 - m23) * s;\r\n            dst[1] = (m13 - m31) * s;\r\n            dst[2] = (m21 - m12) * s;\r\n        } else if (m11 > m22 && m11 > m33) {\r\n            const s = 2 * Math.sqrt(1 + m11 - m22 - m33);\r\n            dst[3] = (m32 - m23) / s;\r\n            dst[0] = 0.25 * s;\r\n            dst[1] = (m12 + m21) / s;\r\n            dst[2] = (m13 + m31) / s;\r\n        } else if (m22 > m33) {\r\n            const s = 2 * Math.sqrt(1 + m22 - m11 - m33);\r\n            dst[3] = (m13 - m31) / s;\r\n            dst[0] = (m12 + m21) / s;\r\n            dst[1] = 0.25 * s;\r\n            dst[2] = (m23 + m32) / s;\r\n        } else {\r\n            const s = 2 * Math.sqrt(1 + m33 - m11 - m22);\r\n            dst[3] = (m21 - m12) / s;\r\n            dst[0] = (m13 + m31) / s;\r\n            dst[1] = (m23 + m32) / s;\r\n            dst[2] = 0.25 * s;\r\n        }\r\n    }\r\n\r\n    function decompose(mat, translation, quaternion, scale) {\r\n        let sx = m4.length(mat.slice(0, 3));\r\n        const sy = m4.length(mat.slice(4, 7));\r\n        const sz = m4.length(mat.slice(8, 11));\r\n\r\n        // if determinate is negative, we need to invert one scale\r\n        const det = determinate(mat);\r\n        if (det < 0) {\r\n            sx = -sx;\r\n        }\r\n\r\n        translation[0] = mat[12];\r\n        translation[1] = mat[13];\r\n        translation[2] = mat[14];\r\n\r\n        // scale the rotation part\r\n        const matrix = m4.copy(mat);\r\n\r\n        const invSX = 1 / sx;\r\n        const invSY = 1 / sy;\r\n        const invSZ = 1 / sz;\r\n\r\n        matrix[0] *= invSX;\r\n        matrix[1] *= invSX;\r\n        matrix[2] *= invSX;\r\n\r\n        matrix[4] *= invSY;\r\n        matrix[5] *= invSY;\r\n        matrix[6] *= invSY;\r\n\r\n        matrix[8] *= invSZ;\r\n        matrix[9] *= invSZ;\r\n        matrix[10] *= invSZ;\r\n\r\n        quatFromRotationMatrix(matrix, quaternion);\r\n\r\n        scale[0] = sx;\r\n        scale[1] = sy;\r\n        scale[2] = sz;\r\n    }\r\n\r\n    function determinate(m) {\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0  = m22 * m33;\r\n        var tmp_1  = m32 * m23;\r\n        var tmp_2  = m12 * m33;\r\n        var tmp_3  = m32 * m13;\r\n        var tmp_4  = m12 * m23;\r\n        var tmp_5  = m22 * m13;\r\n        var tmp_6  = m02 * m33;\r\n        var tmp_7  = m32 * m03;\r\n        var tmp_8  = m02 * m23;\r\n        var tmp_9  = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n\r\n        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\r\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\r\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\r\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\r\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n\r\n        return 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n    }\r\n\r\n    /**\r\n     * Computes the inverse of a matrix.\r\n     * @param {Matrix4} m matrix to compute inverse of\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function inverse(m, dst) {\r\n        dst = dst || new MatType(16);\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0  = m22 * m33;\r\n        var tmp_1  = m32 * m23;\r\n        var tmp_2  = m12 * m33;\r\n        var tmp_3  = m32 * m13;\r\n        var tmp_4  = m12 * m23;\r\n        var tmp_5  = m22 * m13;\r\n        var tmp_6  = m02 * m33;\r\n        var tmp_7  = m32 * m03;\r\n        var tmp_8  = m02 * m23;\r\n        var tmp_9  = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n        var tmp_12 = m20 * m31;\r\n        var tmp_13 = m30 * m21;\r\n        var tmp_14 = m10 * m31;\r\n        var tmp_15 = m30 * m11;\r\n        var tmp_16 = m10 * m21;\r\n        var tmp_17 = m20 * m11;\r\n        var tmp_18 = m00 * m31;\r\n        var tmp_19 = m30 * m01;\r\n        var tmp_20 = m00 * m21;\r\n        var tmp_21 = m20 * m01;\r\n        var tmp_22 = m00 * m11;\r\n        var tmp_23 = m10 * m01;\r\n\r\n        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\r\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\r\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\r\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\r\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n\r\n        var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n\r\n        dst[0] = d * t0;\r\n        dst[1] = d * t1;\r\n        dst[2] = d * t2;\r\n        dst[3] = d * t3;\r\n        dst[4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\r\n            (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\r\n        dst[5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\r\n            (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\r\n        dst[6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\r\n            (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\r\n        dst[7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\r\n            (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\r\n        dst[8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\r\n            (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\r\n        dst[9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\r\n            (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\r\n        dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\r\n            (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\r\n        dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\r\n            (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\r\n        dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\r\n            (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\r\n        dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\r\n            (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\r\n        dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\r\n            (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\r\n        dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\r\n            (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Takes a  matrix and a vector with 4 entries, transforms that vector by\r\n     * the matrix, and returns the result as a vector with 4 entries.\r\n     * @param {Matrix4} m The matrix.\r\n     * @param {Vector4} v The point in homogenous coordinates.\r\n     * @param {Vector4} dst optional vector4 to store result\r\n     * @return {Vector4} dst or new Vector4 if not provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function transformVector(m, v, dst) {\r\n        dst = dst || new MatType(4);\r\n        for (var i = 0; i < 4; ++i) {\r\n            dst[i] = 0.0;\r\n            for (var j = 0; j < 4; ++j) {\r\n                dst[i] += v[j] * m[j * 4 + i];\r\n            }\r\n        }\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Takes a 4-by-4 matrix and a vector with 3 entries,\r\n     * interprets the vector as a point, transforms that point by the matrix, and\r\n     * returns the result as a vector with 3 entries.\r\n     * @param {Matrix4} m The matrix.\r\n     * @param {Vector3} v The point.\r\n     * @param {Vector4} dst optional vector4 to store result\r\n     * @return {Vector4} dst or new Vector4 if not provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function transformPoint(m, v, dst) {\r\n        dst = dst || new MatType(3);\r\n        var v0 = v[0];\r\n        var v1 = v[1];\r\n        var v2 = v[2];\r\n        var d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\r\n\r\n        dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\r\n        dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\r\n        dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\r\n     * direction, transforms that direction by the matrix, and returns the result;\r\n     * assumes the transformation of 3-dimensional space represented by the matrix\r\n     * is parallel-preserving, i.e. any combination of rotation, scaling and\r\n     * translation, but not a perspective distortion. Returns a vector with 3\r\n     * entries.\r\n     * @param {Matrix4} m The matrix.\r\n     * @param {Vector3} v The direction.\r\n     * @param {Vector4} dst optional vector4 to store result\r\n     * @return {Vector4} dst or new Vector4 if not provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function transformDirection(m, v, dst) {\r\n        dst = dst || new MatType(3);\r\n\r\n        var v0 = v[0];\r\n        var v1 = v[1];\r\n        var v2 = v[2];\r\n\r\n        dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\r\n        dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\r\n        dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\r\n\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\r\n     * as a normal to a surface, and computes a vector which is normal upon\r\n     * transforming that surface by the matrix. The effect of this function is the\r\n     * same as transforming v (as a direction) by the inverse-transpose of m.  This\r\n     * function assumes the transformation of 3-dimensional space represented by the\r\n     * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\r\n     * translation, but not a perspective distortion.  Returns a vector with 3\r\n     * entries.\r\n     * @param {Matrix4} m The matrix.\r\n     * @param {Vector3} v The normal.\r\n     * @param {Vector3} [dst] The direction.\r\n     * @return {Vector3} The transformed direction.\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    function transformNormal(m, v, dst) {\r\n        dst = dst || new MatType(3);\r\n        var mi = inverse(m);\r\n        var v0 = v[0];\r\n        var v1 = v[1];\r\n        var v2 = v[2];\r\n\r\n        dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\r\n        dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\r\n        dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\r\n\r\n        return dst;\r\n    }\r\n\r\n    function copy(src, dst) {\r\n        dst = dst || new MatType(16);\r\n\r\n        dst[ 0] = src[ 0];\r\n        dst[ 1] = src[ 1];\r\n        dst[ 2] = src[ 2];\r\n        dst[ 3] = src[ 3];\r\n        dst[ 4] = src[ 4];\r\n        dst[ 5] = src[ 5];\r\n        dst[ 6] = src[ 6];\r\n        dst[ 7] = src[ 7];\r\n        dst[ 8] = src[ 8];\r\n        dst[ 9] = src[ 9];\r\n        dst[10] = src[10];\r\n        dst[11] = src[11];\r\n        dst[12] = src[12];\r\n        dst[13] = src[13];\r\n        dst[14] = src[14];\r\n        dst[15] = src[15];\r\n\r\n        return dst;\r\n    }\r\n\r\nexport const m4 = {\r\n        copy: copy,\r\n        lookAt: lookAt,\r\n        addVectors: addVectors,\r\n        subtractVectors: subtractVectors,\r\n        scaleVector: scaleVector,\r\n        distance: distance,\r\n        distanceSq: distanceSq,\r\n        normalize: normalize,\r\n        compose: compose,\r\n        cross: cross,\r\n        decompose: decompose,\r\n        dot: dot,\r\n        identity: identity,\r\n        transpose: transpose,\r\n        length: length,\r\n        lengthSq: lengthSq,\r\n        orthographic: orthographic,\r\n        frustum: frustum,\r\n        perspective: perspective,\r\n        translation: translation,\r\n        translate: translate,\r\n        xRotation: xRotation,\r\n        yRotation: yRotation,\r\n        zRotation: zRotation,\r\n        xRotate: xRotate,\r\n        yRotate: yRotate,\r\n        zRotate: zRotate,\r\n        axisRotation: axisRotation,\r\n        axisRotate: axisRotate,\r\n        scaling: scaling,\r\n        scale: scale,\r\n        multiply: multiply,\r\n        inverse: inverse,\r\n        transformVector: transformVector,\r\n        transformPoint: transformPoint,\r\n        transformDirection: transformDirection,\r\n        transformNormal: transformNormal,\r\n        setDefaultType: setDefaultType,\r\n}\r\n\r\n","import { m4 } from './m4'\r\n\r\nconst {\r\n    //floor,\r\n    random,\r\n} = Math\r\n//const ranN = (start, end) => start + floor(random() * (end - start))\r\nexport const ran = (start, end) => start + random() * (end - start)\r\n\r\n\r\n\r\nexport const createFace = (v1, v2, v3, v4) => [...v1, ...v2, ...v3, ...v1, ...v3, ...v4]\r\nexport const createUv = (v1, v2, v3, v4) => [...v1, ...v2, ...v3, ...v1, ...v3, ...v4]\r\nexport const fillColorFace = c => [...c, ...c, ...c, ...c, ...c, ...c]\r\nexport const fillColor6 = c => [...c, ...c, ...c, ...c, ...c, ...c]\r\nexport const getAngle = (x, y) => {\r\n    let inRads = Math.atan2(y, x);\r\n    return inRads - Math.PI / 2\r\n}\r\n\r\nexport const angleFromCoords = (x, y) => {\r\n    let rad = Math.atan(y / x)\r\n    x < 0 && y > 0 && (rad = Math.PI - Math.abs(rad))\r\n    x < 0 && y <= 0 && (rad = Math.PI + Math.abs(rad))\r\n    return rad\r\n}\r\n\r\n\r\n\r\nexport const createFaceWithSquare = (v1, v2, v3, v4, color1, color2, offset) => {\r\n    const maxW = v2[0] - v1[0]\r\n    const maxH = v3[1] - v1[1]\r\n\r\n    let innerW = ran(maxW * 0.3, maxW * 0.7)\r\n    let innerH = ran(maxH * 0.3, maxH * 0.7)\r\n\r\n    if (offset) {\r\n        innerW = maxW * offset\r\n        innerH = maxH * offset\r\n    }\r\n\r\n    const x1 = v1[0] + (maxW - innerW) / 2\r\n    const x2 = v2[0] - (maxW - innerW) / 2\r\n    const y1 = v1[1] + (maxH - innerH) / 2\r\n    const y2 = v3[1] - (maxH - innerH) / 2\r\n\r\n    const v1_i = [x1, y1, v1[2]]\r\n    const v2_i = [x2, y1, v1[2]]\r\n    const v3_i = [x2, y2, v1[2]]\r\n    const v4_i = [x1, y2, v1[2]]\r\n\r\n    const vArr = []\r\n    vArr.push(\r\n        ...createFace(v1_i, v2_i, v3_i, v4_i),\r\n        ...createFace(v1, v2, v2_i, v1_i),\r\n        ...createFace(v2_i, v2, v3, v3_i),\r\n        ...createFace(v4_i, v3_i, v3, v4),\r\n        ...createFace(v1, v1_i, v4_i, v4),\r\n    )\r\n\r\n    const cArr = fillColorFaceWithSquare(color1, color2)\r\n\r\n    const uArr = [\r\n        ...createUv(\r\n            [.5, .5],\r\n            [1, .5],\r\n            [1, 1],\r\n            [.5, 1],\r\n        ),\r\n\r\n        ...createUv(\r\n            [0, .5],\r\n            [.5, .5],\r\n            //[.5, 1],\r\n            //[0, 1],\r\n            [.4, .6],\r\n            [.1, .6],\r\n        ),\r\n        ...createUv(\r\n            [.4, .6],\r\n            [.5, .5],\r\n            [.5, 1],\r\n            [.4, .9],\r\n        ),\r\n        ...createUv(\r\n            [.1, .9],\r\n            [.4, .9],\r\n            [.5, 1],\r\n            [0, 1],\r\n        ),\r\n        ...createUv(\r\n            [0, .5],\r\n            [.1, .6],\r\n            [.1, .9],\r\n            [0, 1],\r\n        )\r\n    ]\r\n\r\n\r\n    return { \r\n        vArr,\r\n        cArr,\r\n        uArr,\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const fillColorFaceWithSquare = (c1, c2) => [\r\n    ...fillColorFace(c1),\r\n    ...fillColorFace(c2),\r\n    ...fillColorFace(c2),\r\n    ...fillColorFace(c2),\r\n    ...fillColorFace(c2),\r\n]\r\n\r\n\r\n\r\nexport const transformArr = (arr, x = 0, y = 0, z = 0, r = 0) => {\r\n    let matrix = m4.yRotation(r);\r\n    matrix = m4.translate(matrix, x, y, z);\r\n\r\n    for (let i = 0; i < arr.length; i += 3) {\r\n        const vector = m4.transformPoint(matrix, [arr[i + 0], arr[i + 1], arr[i + 2], 1])\r\n        arr[i + 0] = vector[0]\r\n        arr[i + 1] = vector[1]\r\n        arr[i + 2] = vector[2]\r\n    }\r\n}\r\n\r\nexport const rotateArr = (arr, angle) => {\r\n    const matrix = m4.yRotation(angle);\r\n\r\n    for (let i = 0; i < arr.length; i += 3) {\r\n        const vector = m4.transformPoint(matrix, [arr[i + 0], arr[i + 1], arr[i + 2], 1])\r\n        arr[i + 0] = vector[0]\r\n        arr[i + 1] = vector[1]\r\n        arr[i + 2] = vector[2]\r\n    }\r\n}\r\n\r\nexport const rotateArrY = (arr, angle) => {\r\n    const matrix = m4.yRotation(angle);\r\n\r\n    for (let i = 0; i < arr.length; i += 3) {\r\n        const vector = m4.transformPoint(matrix, [arr[i + 0], arr[i + 1], arr[i + 2], 1])\r\n        arr[i + 0] = vector[0]\r\n        arr[i + 1] = vector[1]\r\n        arr[i + 2] = vector[2]\r\n    }\r\n}\r\n\r\nexport const rotateArrZ = (arr, angle) => {\r\n    const matrix = m4.zRotation(angle);\r\n\r\n    for (let i = 0; i < arr.length; i += 3) {\r\n        const vector = m4.transformPoint(matrix, [arr[i + 0], arr[i + 1], arr[i + 2], 1])\r\n        arr[i + 0] = vector[0]\r\n        arr[i + 1] = vector[1]\r\n        arr[i + 2] = vector[2]\r\n    }\r\n}\r\n\r\n\r\nexport const translateArr = (arr, x = 0, y = 0, z = 0) => {\r\n    const matrix = m4.translation(x, y, z);\r\n\r\n    for (let i = 0; i < arr.length; i += 3) {\r\n        const vector = m4.transformPoint(matrix, [arr[i + 0], arr[i + 1], arr[i + 2], 1])\r\n        arr[i + 0] = vector[0]\r\n        arr[i + 1] = vector[1]\r\n        arr[i + 2] = vector[2]\r\n    }\r\n}\r\n\r\nexport const scaleArr = (arr, sX, sY, sZ) => {\r\n    const matrix = m4.scaling(sX, sY, sZ)\r\n\r\n    for (let i = 0; i < arr.length; i += 3) {\r\n        const vector = m4.transformPoint(matrix, [arr[i + 0], arr[i + 1], arr[i + 2], 1])\r\n        arr[i + 0] = vector[0]\r\n        arr[i + 1] = vector[1]\r\n        arr[i + 2] = vector[2]\r\n    }\r\n}\r\n\r\nexport const inverseVertexOrder = copyV => {\r\n    for (let i = 0; i < copyV.length; i += 18) {\r\n        const n0_0 = copyV[i]\r\n        const n0_1 = copyV[i + 1]\r\n        const n0_2 = copyV[i + 2]\r\n\r\n        const n1_0 = copyV[i + 3]\r\n        const n1_1 = copyV[i + 3 + 1]\r\n        const n1_2 = copyV[i + 3 + 2]\r\n\r\n        const n4_0 = copyV[i + 12]\r\n        const n4_1 = copyV[i + 12 + 1]\r\n        const n4_2 = copyV[i + 12 + 2]\r\n\r\n        const n5_0 = copyV[i + 15]\r\n        const n5_1 = copyV[i + 15 + 1]\r\n        const n5_2 = copyV[i + 15 + 2]\r\n\r\n\r\n        copyV[i] = n1_0\r\n        copyV[i + 1] = n1_1\r\n        copyV[i + 2] = n1_2\r\n\r\n        copyV[i + 3] = n0_0\r\n        copyV[i + 3 + 1] = n0_1\r\n        copyV[i + 3 + 2] = n0_2\r\n\r\n        copyV[i + 12] = n5_0\r\n        copyV[i + 12 + 1] = n5_1\r\n        copyV[i + 12 + 2] = n5_2\r\n\r\n        copyV[i + 15] = n4_0\r\n        copyV[i + 15 + 1] = n4_1\r\n        copyV[i + 15 + 2] = n4_2\r\n    }\r\n}\r\n","const G = 3\r\nconst m = 2\r\nconst _ = 1\r\n\r\n\r\nconst GROUND = [\r\n    [G, G, G, G],\r\n    [G, m, m, G],\r\n    [G, m, m, G],\r\n    [G, G, G, G],\r\n]\r\n\r\nconst WATER = [\r\n    [_, _, _, _],\r\n    [_, _, _, _],\r\n    [_, _, _, _],\r\n    [_, _, _, _],\r\n]\r\n\r\nconst G_W_1 = [\r\n    [_, m, m, G],\r\n    [_, m, m, G],\r\n    [_, m, m, G],\r\n    [_, m, m, G],\r\n]\r\n\r\nconst G_W_2 = [\r\n    [_, m, m, G],\r\n    [m, m, m, G],\r\n    [m, m, m, G],\r\n    [G, G, G, G],\r\n]\r\n\r\n\r\nconst G_W_3 = [\r\n    [_, m, m, G],\r\n    [m, m, m, m],\r\n    [m, m, m, m],\r\n    [G, m, m, _],\r\n]\r\n\r\nconst G_W_4 = [\r\n    [_, m, m, G],\r\n    [m, m, m, G],\r\n    [m, m, m, G],\r\n    [G, m, m, G],\r\n]\r\n\r\nconst G_W_5 = [\r\n    [G, m, m, G],\r\n    [m, m, m, G],\r\n    [m, m, m, G],\r\n    [_, m, m, G],\r\n]\r\n\r\n\r\nconst G_W_6 = [\r\n    [G, m, m, _],\r\n    [m, m, m, _],\r\n    [m, m, m, _],\r\n    [_, m, m, _],\r\n]\r\n\r\nconst G_W_7 = [\r\n    [_, m, m, G],\r\n    [m, m, m, G],\r\n    [m, m, m, G],\r\n    [_, m, m, G],\r\n]\r\n\r\n\r\nconst G_W_8 = [\r\n    [_, _, _, _],\r\n    [m, m, m, _],\r\n    [m, m, m, _],\r\n    [_, m, m, _],\r\n]\r\n\r\nconst G_W_9 = [\r\n    [_, m, m, _],\r\n    [m, m, m, m],\r\n    [m, m, m, m],\r\n    [_, _, _, _],\r\n]\r\n\r\nconst G_W_10 = [\r\n    [G, m, m, G],\r\n    [m, m, m, m],\r\n    [m, m, m, m],\r\n    [G, m, m, _],\r\n]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst makeRotatedTiles = src => {\r\n    const arr = [src]\r\n    {\r\n        const r = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\r\n        for (let j = 0; j < r.length; ++j) {\r\n            for (let k = 0; k < r[j].length; ++k) {\r\n                r[j][k] = src[3 - j][3 - k]\r\n            }\r\n        }\r\n        arr.push(r)\r\n    }\r\n    {\r\n        const r = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\r\n        for (let j = 0; j < r.length; ++j) {\r\n            for (let k = 0; k < r[j].length; ++k) {\r\n                r[k][j] = src[j][k]\r\n            }\r\n        }\r\n        arr.push(r)\r\n    }\r\n    {\r\n        const r = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\r\n        for (let j = 0; j < r.length; ++j) {\r\n            for (let k = 0; k < r[j].length; ++k) {\r\n                r[k][j] = src[j][3 - k]\r\n            }\r\n        }\r\n        arr.push(r)\r\n    }\r\n    return arr\r\n}\r\n\r\n\r\nconst ARR = []\r\nARR.push(GROUND, GROUND, GROUND, GROUND)\r\nARR.push(WATER, WATER, WATER, WATER)\r\nARR.push(...makeRotatedTiles(G_W_1))\r\n//ARR.push(...makeRotatedTiles(G_W_1))\r\nARR.push(...makeRotatedTiles(G_W_2))\r\nARR.push(...makeRotatedTiles(G_W_3))\r\nARR.push(...makeRotatedTiles(G_W_4))\r\nARR.push(...makeRotatedTiles(G_W_5))\r\nARR.push(...makeRotatedTiles(G_W_6))\r\nARR.push(...makeRotatedTiles(G_W_7))\r\nARR.push(...makeRotatedTiles(G_W_8))\r\nARR.push(...makeRotatedTiles(G_W_9))\r\nARR.push(...makeRotatedTiles(G_W_10))\r\n\r\n\r\n//ARR.push(GROUND, WATER)\r\n\r\n\r\nconst prepareTile = t => {\r\n    const n = [...t[0]]\r\n    const s = [...t[3]]\r\n    const w = []\r\n    const e = []\r\n    for (let i = 0; i < t.length; ++i) {\r\n        w.push(t[i][0])\r\n        e.push(t[i][3])\r\n    }\r\n    return { tile: t, n, s, w, e }\r\n}\r\n\r\nconst ARR_TILES = []\r\nfor (let i = 0; i < ARR.length; ++i) {\r\n    ARR_TILES.push(prepareTile(ARR[i]))\r\n}\r\n\r\nexport { ARR_TILES }\r\n","import {ARR_TILES} from \"./TILES\";\r\n\r\nconst S_Z = 50\r\nconst S_X = 50\r\n\r\nconst MAP = []\r\n\r\n\r\n\r\nexport const createMap = () => {\r\n    for (let i = 0; i < S_Z; ++i) {\r\n        const arr = []\r\n        for (let j = 0; j < S_X; ++j) {\r\n            arr.push(10)\r\n        }\r\n        MAP.push(arr)\r\n    }\r\n\r\n    //MAP[0][0] = ARR_TILES[0]\r\n\r\n    const compareSide = (s1, s2) => {\r\n        for (let i = 0; i < s1.length; ++i) {\r\n            if (s1[i] !== s2[i]) {\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    const fillMap = (i, j) => {\r\n        let w = 0\r\n        if (MAP[i][j - 1] && MAP[i][j - 1] !== 10) {\r\n            w = MAP[i][j - 1].e\r\n        }\r\n        let e = 0\r\n        if (MAP[i][j + 1] && MAP[i][j + 1] !== 10) {\r\n            e = MAP[i][j - 1].w\r\n        }\r\n        let n = 0\r\n        if (MAP[i - 1] && MAP[i - 1][j] && MAP[i - 1][j] !== 10) {\r\n            n = MAP[i - 1][j].s\r\n        }\r\n        let s = 0\r\n        if (MAP[i + 1] && MAP[i + 1][j] && MAP[i + 1][j] !== 10) {\r\n            s = MAP[i + 1][j].n\r\n        }\r\n        const startIndex = Math.floor(Math.random() * ARR_TILES.length)\r\n\r\n        for (let ind = startIndex; ind < ARR_TILES.length; ++ind) {\r\n            let isCompare = true\r\n            if (n && !compareSide(ARR_TILES[ind].n, n)) {\r\n                isCompare = false\r\n            }\r\n            if (s && !compareSide(ARR_TILES[ind].s, s)) {\r\n                isCompare = false\r\n            }\r\n            if (w && !compareSide(ARR_TILES[ind].w, w)) {\r\n                isCompare = false\r\n            }\r\n            if (e && !compareSide(ARR_TILES[ind].e, e)) {\r\n                isCompare = false\r\n            }\r\n            if (isCompare) {\r\n                return ARR_TILES[ind]\r\n            }\r\n        }\r\n        for (let ind = 0; ind < startIndex; ++ind) {\r\n            let isCompare = true\r\n            if (n && !compareSide(ARR_TILES[ind].n, n)) {\r\n                isCompare = false\r\n            }\r\n            if (s && !compareSide(ARR_TILES[ind].s, s)) {\r\n                isCompare = false\r\n            }\r\n            if (w && !compareSide(ARR_TILES[ind].w, w)) {\r\n                isCompare = false\r\n            }\r\n            if (e && !compareSide(ARR_TILES[ind].e, e)) {\r\n                isCompare = false\r\n            }\r\n            if (isCompare) {\r\n                return ARR_TILES[ind]\r\n            }\r\n        }\r\n        return 10\r\n    }\r\n\r\n\r\n\r\n\r\n    for (let i = 0; i < MAP.length; ++i) {\r\n        for (let j = 0; j < MAP[i].length; ++j) {\r\n            if (MAP[i][j] !== 10 ) {\r\n                continue;\r\n            }\r\n            const result = fillMap(i , j)\r\n            MAP[i][j] = result\r\n        }\r\n    }\r\n\r\n    return MAP\r\n\r\n}\r\n","import * as THREE from \"three\";\r\n\r\n\r\nconst S = 40\r\nconst sS = 10\r\nconst H = 80\r\n\r\nconst createDataG = (arr, i, j) => {\r\n    const v = []\r\n    const c = []\r\n    for (let ii = 0; ii < arr.length; ++ii) {\r\n        for (let jj = 0; jj < arr[ii].length; ++jj) {\r\n            v.push(\r\n                j * S + jj * sS, arr[ii][jj] * H, i * S + ii * sS,\r\n                j * S + jj * sS + sS, arr[ii][jj] * H, i * S + ii * sS,\r\n                j * S + jj * sS + sS, arr[ii][jj] * H, i * S + ii * sS + sS,\r\n\r\n                j * S + jj * sS, arr[ii][jj] * H, i * S + ii * sS,\r\n                j * S + jj * sS + sS, arr[ii][jj] * H, i * S + sS + ii * sS,\r\n                j * S + jj * sS, arr[ii][jj] * H, i * S + sS + ii * sS,\r\n            )\r\n\r\n            const n = ((arr[ii][jj] - 1) / 2 * 0.3 + .3) * .7\r\n            const col = [n * 0.5, 0, n * 1.5,]\r\n\r\n            c.push(\r\n                ...col,\r\n                ...col,\r\n                ...col,\r\n                ...col,\r\n                ...col,\r\n                ...col,\r\n\r\n            )\r\n\r\n            if (arr[ii + 1]) {\r\n                // const n2 = (arr[ii + 1][jj] - 1) / 2 * 0.3 + .4\r\n                // const col = Math.max(n, n2)\r\n\r\n                v.push(\r\n                    j * S + jj * sS, arr[ii + 1][jj] * H, i * S + ii * sS + sS,\r\n                    j * S + jj * sS + sS, arr[ii + 1][jj] * H, i * S + ii * sS + sS,\r\n                    j * S + jj * sS + sS, arr[ii][jj] * H, i * S + ii * sS + sS,\r\n\r\n                    j * S + jj * sS, arr[ii + 1][jj] * H, i * S + ii * sS + sS,\r\n                    j * S + jj * sS + sS, arr[ii][jj] * H, i * S + ii * sS + sS,\r\n                    j * S + jj * sS, arr[ii][jj] * H, i * S + ii * sS + sS,\r\n                )\r\n\r\n                const n = ((arr[ii][jj] - 1) / 2 * 0.3 + .3) * .7\r\n                const n2 = ((arr[ii + 1][jj] - 1) / 2 * 0.3 + .4) * .7\r\n                const col1 = Math.max(n, n2)\r\n                const col = [col1 * 1.5, 0, col1 * .5,]\r\n\r\n                c.push(\r\n                    ...col,\r\n                    ...col,\r\n                    ...col,\r\n                    ...col,\r\n                    ...col,\r\n                    ...col,\r\n                )\r\n            }\r\n\r\n            if (arr[ii][jj + 1]) {\r\n                v.push(\r\n                    j * S + jj * sS + sS, arr[ii][jj + 1] * H, i * S + ii * sS + sS,\r\n                    j * S + jj * sS + sS, arr[ii][jj + 1] * H, i * S + ii * sS,\r\n                    j * S + jj * sS + sS, arr[ii][jj] * H, i * S + ii * sS,\r\n\r\n                    j * S + jj * sS + sS, arr[ii][jj + 1] * H, i * S + ii * sS + sS,\r\n                    j * S + jj * sS + sS, arr[ii][jj] * H, i * S + ii * sS,\r\n                    j * S + jj * sS + sS, arr[ii][jj] * H, i * S + ii * sS + sS,\r\n                )\r\n\r\n                const n = ((arr[ii][jj] - 1) / 2 * 0.3 + .3) * .7\r\n                const n2 = ((arr[ii][jj + 1] - 1) / 2 * 0.3 + .4) * .7\r\n                const col1 = Math.max(n, n2)\r\n                const col = [col1 * .3, col1 * 1.5, col1 * .5,]\r\n\r\n                c.push(\r\n                    ...col,\r\n                    ...col,\r\n                    ...col,\r\n                    ...col,\r\n                    ...col,\r\n                    ...col,\r\n                )\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    return { v, c }\r\n}\r\n\r\n\r\n\r\n\r\nexport const createMeshByMap = (map) => {\r\n    //console.log(map)\r\n    const v = []\r\n    const c = []\r\n\r\n    for (let i = 0; i < map.length; ++i) {\r\n        for (let j = 0; j < map[i].length; ++j) {\r\n            if (!map[i][j].tile) {\r\n                continue;\r\n            }\r\n            const d = createDataG(map[i][j].tile, i, j)\r\n            v.push(...d.v)\r\n            c.push(...d.c)\r\n        }\r\n    }\r\n\r\n\r\n    const vertices = new Float32Array(v)\r\n    const g = new THREE.BufferGeometry()\r\n\r\n    g.setAttribute('position', new THREE.BufferAttribute(vertices, 3))\r\n    g.computeVertexNormals()\r\n\r\n    const colors = new Float32Array(c)\r\n    g.setAttribute('color', new THREE.BufferAttribute(colors, 3))\r\n\r\n\r\n    const mesh = new THREE.Mesh(g, new THREE.MeshPhongMaterial({\r\n        color: 0xFFFFFF,\r\n        side: THREE.DoubleSide,\r\n        vertexColors: true\r\n    }))\r\n    mesh.position.set(0, -20, -200)\r\n    return mesh\r\n}\r\n","//import { LoaderAssets } from '../../../_CORE/helpers/helper_LoadAssets'\r\nimport { EventEmitter } from \"../../../_CORE/helpers/helper_Emitter\"\r\nimport { DeviceResizer } from \"../../../_CORE/helpers/helper_DeviceResizer\"\r\nimport { FrameUpdater } from \"../../../_CORE/helpers/helper_FrameUpdater_02\"\r\nimport { Helper_TweenUpdater } from \"../../../_CORE/helpers/helper_TweenUpdater\"\r\nimport { Studio } from '../Entities/Studio'\r\n//import { KeyBoard } from \"../../../_CORE/helpers/helper_KeyBoard\"\r\n//import { Player } from '../../../_CORE/entities/createPlayer_v02'\r\n\r\n\r\n//import { Helper_MaterialsLib } from '../../../_CORE/helpers/helper_MaterialsLib'\r\n//import mapTop from '../../../assets/chapter06/mapGround.jpg'\r\n//import bodyShadow from '../../../assets/chapter06/mapShadowBody.jpg'\r\n//import pxjpg2 from '../../../assets/matIronBox/posx.jpg'\r\n//import nxjpg2 from '../../../assets/matIronBox/negx.jpg'\r\n//import pyjpg2 from '../../../assets/matIronBox/posy.jpg'\r\n//import nyjpg2 from '../../../assets/matIronBox/negy.jpg'\r\n//import pzjpg2 from '../../../assets/matIronBox/posz.jpg'\r\n//import nzjpg2 from '../../../assets/matIronBox/negz.jpg'\r\n\r\n\r\n//import { system_PlayerMoveOnLevel } from '../systems/system_PlayerMoveOnLevel'\r\n//import { system_PlayerNearLevelItems } from '../systems/system_PlayerNearLevelItems'\r\n\r\n\r\nimport { actions } from '../actions/actions'\r\n//import { Ui } from \"../ui/Ui\";\r\n\r\n\r\n//import ironNormal from '../../../assets/chapter06/concrete/broken_down_concrete2_Normal-dx.jpg'\r\n//import ironAO from '../../../assets/chapter06/concrete/broken_down_concrete2_ao.jpg'\r\n//import ironAlbedo from '../../../assets/chapter06/concrete/broken_down_concrete2_albedo.jpg'\r\n\r\n//import bodySrc from '../../../assets/chapter06/body.obj'\r\n//import endWaySrc from '../../../assets/chapter06/endWay.obj'\r\n\r\n\r\n\r\nexport const GAME_MODULES = [\r\n    {\r\n        key: 'emitter',\r\n        constr: EventEmitter,\r\n        initStateKey: 'pageLoaded',\r\n    },\r\n    {\r\n        key: 'deviceResizer',\r\n        constr: DeviceResizer,\r\n        initStateKey: 'pageLoaded',\r\n    },\r\n  //  {\r\n  //      key: 'loaderAssets',\r\n  //      constr: LoaderAssets,\r\n  //      initStateKey: 'pageLoaded',\r\n  //  },\r\n\r\n    /////////////////////////////////////////\r\n\r\n    {\r\n        key: 'frameUpdater',\r\n        constr: FrameUpdater,\r\n        initStateKey: 'beforeStartPlay',\r\n    },\r\n   // {\r\n   //     key: 'tweenUpdater',\r\n   //     constr: Helper_TweenUpdater,\r\n   //     initStateKey: 'beforeStartPlay',\r\n   // },\r\n    {\r\n        key: 'studio',\r\n        constr: Studio,\r\n        initStateKey: 'beforeStartPlay',\r\n    },\r\n   // {\r\n   //     key: 'keyBoard',\r\n   //     constr: KeyBoard,\r\n   //     initStateKey: 'beforeStartPlay',\r\n   // },\r\n   // {\r\n   //     key: 'player',\r\n   //     constr: Player,\r\n   //     initStateKey: 'beforeStartPlay',\r\n   // },\r\n   // {\r\n   //     key: 'system_PlayerNearLevelItems',\r\n   //     constr: system_PlayerNearLevelItems,\r\n   //     initStateKey: 'beforeStartPlay',\r\n   // },\r\n   // {\r\n   //     key: 'materialsLib',\r\n   //     constr: Helper_MaterialsLib,\r\n   //     initStateKey: 'beforeStartPlay',\r\n   // },\r\n   // {\r\n   //     key: 'system_PlayerMoveOnLevel',\r\n   //     constr: system_PlayerMoveOnLevel,\r\n   //     initStateKey: 'beforeStartPlay',\r\n   // },\r\n    // {\r\n    //     key: 'system_Sound',\r\n    //     constr: system_Sound,\r\n    //     initStateKey: 'beforeStartPlay',\r\n    //     assetsToLoad: [\r\n    //         { type: 'soundMp3', path: soundAmbientSrc, key: 'soundAmbient' },\r\n    //         //{ type: 'soundMp3', path: carStart, key: 'carStart' },\r\n    //         //{ type: 'soundMp3', path: carLoop, key: 'carLoop' },\r\n    //     ]\r\n    // },\r\n    //{\r\n    //    key: 'customUi',\r\n    //    constr: Ui,\r\n    //    initStateKey: 'pageLoaded',\r\n   // },\r\n    {\r\n        key: 'actions',\r\n        constr: actions,\r\n        initStateKey: 'beforeStartPlay',\r\n            // assetsToLoad: [\r\n            //     { type: 'cubeTextures', path: [ pxjpg2, nxjpg2, pyjpg2, nyjpg2, pzjpg2, nzjpg2, ], key: 'skyBox3' },\r\n            //     { type: 'img', path: mapTop, key: 'mapTop', wrap: true },\r\n            //     { type: 'img', path: ironNormal, key: 'ironNormal', wrap: true },\r\n            //     { type: 'img', path: ironAlbedo, key: 'ironAlbedo', wrap: true },\r\n            //     { type: 'img', path: ironAO, key: 'ironAO', wrap: true },\r\n            //     { type: 'obj', path: bodySrc, key: 'bodyModel' },\r\n            //     { type: 'img', path: bodyShadow, key: 'bodyDropShadow' },\r\n            //     { type: 'obj', path: endWaySrc, key: 'endWayModel' },\r\n            // ],\r\n\r\n    },\r\n]\r\n","\r\n\r\n\r\nconst MAX_W = 400\r\nconst MIN_W = 350\r\n\r\n\r\n\r\nexport class DeviceResizer {\r\n    constructor (gameContext) {\r\n        let { emitter, appWrapper } = gameContext\r\n\r\n        !appWrapper && (appWrapper = document.querySelector('.app-wrapper')) \r\n\r\n        emitter.subscribe('mouseDown')(key => {\r\n            if (key === 'butt-fullscreen') openAppFullScreenIfMobile()\r\n        })\r\n\r\n        /** fullscreen */\r\n        const openAppFullScreenIfMobile = () => {\r\n            if (appWrapper.requestFullscreen) {\r\n                appWrapper.requestFullscreen()\r\n            } else if (appWrapper.mozRequestFullScreen) {\r\n                appWrapper.mozRequestFullScreen()\r\n            } else if (appWrapper.webkitRequestFullscreen) {\r\n                appWrapper.webkitRequestFullscreen()\r\n            } else if (appWrapper.msRequestFullscreen) {\r\n                appWrapper.msRequestFullscreen()\r\n            }\r\n        }\r\n\r\n        /** resize */\r\n        const resize = e => {\r\n            appWrapper.style.width = window.innerWidth + 'px'\r\n            appWrapper.style.height = window.innerHeight + 'px'\r\n            appWrapper.style.fontSize = Math.max(Math.min(Math.min(window.innerWidth, window.innerHeight), MAX_W), MIN_W) / 50 + 'px'\r\n\r\n            if (!document.fullscreenElement) {\r\n                emitter.emit('screenMode')('exitFullScreen')\r\n            }\r\n\r\n        }\r\n\r\n        window.addEventListener('resize', resize)\r\n        resize()\r\n    }\r\n}\r\n","import * as TWEEN from '@tweenjs/tween.js'\r\n//import * as THREE from 'three'\r\nimport {\r\n    ENV_NORMAL\r\n    //START_ENV_CONFIG,\r\n    //START_ENV_CONFIG_2,\r\n    //START_ENV_CONFIG_3,\r\n    //ENV_CONFIG_WORD_1,\r\n    //ENV_CONFIG_WORD_2,\r\n    //LOCATIONS_QUADRANTS,\r\n    //SIZE_QUADRANT,\r\n    //playerConfig,\r\n} from '../constants/constants_elements';\r\nimport { createWorldReal } from '../systems/system_worldReal'\r\nimport { createMap } from \"../Entities/GeneratorWave/createGeneratorWave\";\r\nimport { createMeshByMap } from '../Entities/GeneratorWave/treeModel'\r\n\r\n\r\nexport class actions {\r\n    constructor (root) {\r\n        this._root = root\r\n\r\n        const {\r\n            dispatcher,\r\n            frameUpdater,\r\n            studio,\r\n            system_PlayerMoveOnLevel,\r\n            ui,\r\n            player,\r\n        } = this._root\r\n\r\n\r\n        // /** prepare ui ******/\r\n        // dispatcher.dispatch({\r\n        //     type: 'CHANGE_INFO_CHAPTER',\r\n        //     currentChapterIndex: 6,\r\n        // })\r\n        // dispatcher.dispatch({\r\n        //     type: 'ENABLE_CONTROL_SOUND',\r\n        // })\r\n\r\n        const map = createMap()\r\n        const arr = []\r\n        for (let i = 0; i < map.length; ++i) {\r\n            for (let j = 0; j < map[i].length; ++j) {\r\n                arr.push([i, j])\r\n            }\r\n        }\r\n        console.log(arr)\r\n        const addSegment = (ind) => {\r\n            if (!arr[ind]) {\r\n                return\r\n            }\r\n            const [i, j] = arr[ind]\r\n            const m = createMeshByMap([[map[i][j]]])\r\n            m.position.set(j * 40, 0, i * 40)\r\n            studio.addToScene(m)\r\n            setTimeout(() => {addSegment(ind + 1)}, 30)\r\n        }\r\n\r\n        //const m = createMeshByMap(map)\r\n        //console.log(\"!!\", m)\r\n        //root.studio.addToScene(m)\r\n\r\n\r\n\r\n\r\n        /** world */\r\n        //this._worldReal = createWorldReal(root)\r\n        //this._worldReal.addWorld()\r\n        //root.worldReal = this._worldReal\r\n\r\n        // player.mesh.position.set(0, -40, 0)\r\n        // player.mesh.position.set(0, -40, -120)\r\n        // //player.mesh.rotation.y = Math.PI\r\n\r\n        studio.changeEnvironment(ENV_NORMAL, { time: 1 },)\r\n     //   player.toggleBlocked(false)\r\n\r\n        /** update */\r\n        frameUpdater.on(data => {\r\n            TWEEN.update()\r\n           // system_PlayerMoveOnLevel.update(data)\r\n            studio.drawFrame()\r\n        })\r\n\r\n\r\n       // ui.showStartButton(() => {\r\n            //startPipeline(root).then()\r\n            //player.toggleBlocked(false)\r\n            //this._root.system_Sound && this._root.system_Sound.playAmbient()\r\n\r\n\r\n         //   setTimeout(() => {\r\n                addSegment(0)\r\n         //   }, 5000)\r\n\r\n        //})\r\n    }\r\n\r\n}\r\n\r\n","// https://www.artstation.com/artwork/AqP9Wq\r\n\r\n\r\nimport { pipeLineForInit } from '../../_CORE/pipeLines/initPipeLine'\r\nimport * as CONSTANTS from './constants/constants_elements'\r\nimport { GAME_MODULES } from \"./constants/constants_modules\"\r\n\r\n\r\nwindow.addEventListener('load', () => pipeLineForInit(GAME_MODULES, CONSTANTS ))\r\n"],"sourceRoot":""}